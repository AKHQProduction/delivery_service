from datetime import date
from typing import Any

from dishka import FromDishka
from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.types import Message, CallbackQuery
from aiogram_dialog import (
    Dialog,
    Window,
    DialogManager,
    StartMode,
    ChatEvent
)
from aiogram_dialog.widgets.input import (
    MessageInput,
    TextInput,
    ManagedTextInput
)
from aiogram_dialog.widgets.kbd import (
    ManagedCalendar,
    Button,
    Counter,
    Next, Cancel
)
from aiogram_dialog.widgets.text import Const, Format, Multi
from dishka.integrations.aiogram_dialog import inject

from domain.value_objects.phone_number import PhoneNumber
from infrastructure.geopy.errors import AddressIsNotExists
from infrastructure.geopy.geopy_processor import GeoProcessor
from presentation.bot import states
from presentation.bot.widgets import CustomCalendar

router = Router()


@router.message(F.text == "üõí –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def init_create_order_dialog(
        _: Message,
        dialog_manager: DialogManager,
):
    await dialog_manager.start(
        state=states.CreateOrder.WATER_TYPE,
        mode=StartMode.RESET_STACK
    )


async def on_select_water_type(
        _: CallbackQuery,
        widget: Button,
        manager: DialogManager
):
    manager.dialog_data["water_type"] = widget.widget_id

    await manager.next()


async def on_quantity_confirmation(
        call: CallbackQuery,
        _: Button,
        manager: DialogManager,
):
    quantity: int = manager.find("water_quantity_counter").get_value()

    if quantity == 0:
        return await call.answer("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–∞ 0")

    manager.dialog_data["quantity"] = quantity

    await manager.next()


async def on_select_delivery_date(
        call: ChatEvent,
        _: ManagedCalendar,
        manager: DialogManager,
        selected_date: date
):
    current_date: date = date.today()

    if current_date > selected_date:
        return await call.answer("–î–∞—Ç–∞ –≤–∏–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    manager.dialog_data["delivery_date"] = selected_date

    await manager.next()


async def on_select_delivery_time(
        _: CallbackQuery,
        widget: Button,
        manager: DialogManager):
    manager.dialog_data["delivery_time"] = widget.widget_id

    await manager.next()


@inject
async def on_input_user_address(
        msg: Message,
        _: MessageInput,
        manager: DialogManager,
        geolocator: FromDishka[GeoProcessor]

):
    try:
        latitude, longitude = await geolocator.get_coordinates(msg.text)

        manager.dialog_data["latitude"] = latitude
        manager.dialog_data["longitude"] = longitude
        manager.dialog_data["address"] = msg.text

        await manager.next()
    except AddressIsNotExists:
        await msg.answer(
            "üò• –ù–∞ –∂–∞–ª—å, –º–∏ –Ω–µ –∑–º–æ–≥–ª–∏ –í–∞—à–æ—ó –∞–¥—Ä–µ—Å–∏"
        )


async def on_error_input_phone_number(
        msg: Message,
        _: Any,
        __: DialogManager,
        ___: ValueError
):
    await msg.answer(
        "–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
    )


async def get_dialog_data(
        dialog_manager: DialogManager,
        **_kwargs
) -> dict[str, Any]:
    data: dict[str, Any] = dialog_manager.dialog_data

    water_type: str = (
        "–∑–≤–∏—á–∞–π–Ω–∞" if data["water_type"] == "default_water" else "–º–∞–≥–Ω–µ–∑—ñ—è"
    )

    delivery_time: str = (
        "–ø–µ—Ä—à–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è" if data["delivery_time"] == "morning"
        else "–¥—Ä—É–≥–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è"
    )

    phone_input_widget: ManagedTextInput = dialog_manager.find("phone_input")
    phone_data: PhoneNumber = phone_input_widget.get_value()

    data["water_type"] = water_type
    data["delivery_time"] = delivery_time
    data["phone"] = phone_data.to_raw()

    delivery_date: date = data["delivery_date"].strftime("%d.%m.%Y")

    data["delivery_date"] = delivery_date

    return data


async def on_successful_confirm_order(
        call: CallbackQuery,
        _: Button,
        manager: DialogManager
):
    await call.message.answer("üéâ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ")

    await manager.done()


async def on_reject_order(
        call: CallbackQuery,
        _: Button,
        manager: DialogManager
):
    await call.message.answer("üëÄ –ë—É–¥–µ–º–æ –æ—á—ñ–∫—É–≤–∞—Ç–∏ –≤—ñ–¥ –í–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

    await manager.done()


create_order_dialog = Dialog(
    Window(
        Const("1Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å –≤–æ–¥—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
        Button(
            Const("–ó–≤–∏—á–∞–π–Ω–∞"),
            id="default_water",
            on_click=on_select_water_type
        ),
        Button(
            Const("–ú–∞–≥–Ω–µ–∑—ñ—è"),
            id="magnesia_water",
            on_click=on_select_water_type
        ),
        state=states.CreateOrder.WATER_TYPE
    ),
    Window(
        Const("2Ô∏è‚É£ –í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—É—Ç–ª—ñ–≤"),
        Counter(
            id="water_quantity_counter",
        ),
        Button(
            Const("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"),
            id="quantity_confirmation",
            on_click=on_quantity_confirmation
        ),
        state=states.CreateOrder.QUANTITY
    ),
    Window(
        Const("3Ô∏è‚É£ –í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏"),
        CustomCalendar(
            id="delivery_date",
            on_click=on_select_delivery_date
        ),
        state=states.CreateOrder.DELIVERY_DATE,
    ),
    Window(
        Const("4Ô∏è‚É£ –ö–æ–ª–∏ —Å–∞–º–µ –í–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
        Button(
            Const("–ü–µ—Ä—à–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è"),
            id="morning",
            on_click=on_select_delivery_time
        ),
        Button(
            Const("–î—Ä—É–≥–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è"),
            id="afternoon",
            on_click=on_select_delivery_time
        ),
        state=states.CreateOrder.DELIVERY_TIME
    ),
    Window(
        Const("5Ô∏è‚É£ –í–∫–∞–∂—ñ—Ç—å –í–∞—à—É –∞–¥—Ä–µ—Å—Éüëá"),
        MessageInput(
            on_input_user_address,
            content_types=[ContentType.TEXT]
        ),
        state=states.CreateOrder.ADDRESS
    ),
    Window(
        Multi(
            Const("6Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—Éüëá"),
            Const("<i>–í —Ñ–æ—Ä–º–∞—Ç—ñ +380</i>"),
            sep="\n\n"
        ),
        TextInput(
            id="phone_input",
            type_factory=lambda x: PhoneNumber(value=x),
            on_success=Next(),
            on_error=on_error_input_phone_number,
        ),
        state=states.CreateOrder.PHONE
    ),
    Window(
        Const("<b>‚ö†Ô∏è–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> \n"),

        Multi(
            Format("<b>üíß –í–æ–¥–∞:</b> {water_type}"),
            Format("<b>üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> {quantity}"),
            Format("<b>üóì –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_date}"),
            Format("<b>‚è∞ –ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_time}"),
            Format("<b>üè† –ê–¥—Ä–µ—Å–∞:</b> {address}"),
            Format("<b>üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b> {phone}"),
            sep="\n"
        ),
        Button(
            Const("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"),
            id="confirm_order",
            on_click=on_successful_confirm_order
        ),
        Cancel(
            Const("‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å"),
            id="reject_order",
            on_click=on_reject_order
        ),
        state=states.CreateOrder.CONFIRMATION,
        getter=get_dialog_data
    )
)

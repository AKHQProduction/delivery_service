from typing import Any

from aiogram import F
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import Data, Dialog, DialogManager, Window
from aiogram_dialog.api.internal import ReplyCallbackQuery
from aiogram_dialog.widgets.input import (
    ManagedTextInput,
    MessageInput,
    TextInput,
)
from aiogram_dialog.widgets.kbd import (
    Back,
    Button,
    Cancel,
    Next,
    RequestLocation,
    Row,
    Start,
    SwitchTo,
)
from aiogram_dialog.widgets.markup.reply_keyboard import ReplyKeyboardFactory
from aiogram_dialog.widgets.text import Const, Format, Multi
from dishka import FromDishka
from dishka.integrations.aiogram_dialog import inject

from application.common.geo import GeoProcessor
from application.profile.commands.update_address_by_yourself import (
    ChangeAddress,
    ChangeAddressInputData,
)
from infrastructure.geopy.errors import (
    InvalidAddressInputError,
)
from presentation.common.consts import BACK_BTN_TXT, CANCEL_BTN_TXT
from presentation.common.helpers import (
    default_on_start_handler,
    parse_address,
    send_main_keyboard,
)

from . import states


async def on_input_apartment_number(
    _: Message, __: ManagedTextInput, manager: DialogManager, value: int
) -> None:
    manager.dialog_data["apartment_data"] = value

    await manager.next()


async def on_input_floor(
    _: Message, __: ManagedTextInput, manager: DialogManager, value: int
) -> None:
    manager.dialog_data["floor_data"] = value

    await manager.next()


async def on_input_intercom_code(
    _: Message, __: ManagedTextInput, manager: DialogManager, value: int
) -> None:
    manager.dialog_data["intercom_code_data"] = value

    await manager.next()


async def get_all_address_data(
    dialog_manager: DialogManager, **_kwargs
) -> dict[str, Any]:
    address_data = parse_address(dialog_manager.dialog_data["address"])

    address_data.update(
        {
            "apartment_number": dialog_manager.dialog_data.get(
                "apartment_data", "–ø—Ä–∏–≤–∞—Ç–Ω–∏–π –±—É–¥–∏–Ω–æ–∫"
            ),
            "floor": dialog_manager.dialog_data.get("floor_data", "-"),
            "intercom_code": dialog_manager.dialog_data.get(
                "intercom_code_data", "-"
            ),
        }
    )

    return address_data


@inject
async def accept_update_address_in_profile(
    _: CallbackQuery,
    __: Button,
    manager: DialogManager,
    action: FromDishka[ChangeAddress],
) -> None:
    address_data = parse_address(manager.dialog_data["address"])

    await action(
        ChangeAddressInputData(
            city=address_data.get("city"),
            street=address_data.get("street"),
            house_number=address_data.get("house_number"),
            apartment_number=manager.dialog_data.get("apartment_data"),
            floor=manager.dialog_data.get("floor_data"),
            intercom_code=manager.dialog_data.get("intercom_code_data"),
        )
    )


async def on_after_successfully_input_address(
    _: Data, result: Any, manager: DialogManager
):
    if result:
        manager.dialog_data["address"] = result["address"]

        await manager.switch_to(
            state=states.ProfileChangeAddress.APARTMENT_NUMBER
        )


change_address_dialog = Dialog(
    Window(
        Const("–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –∑–º—ñ–Ω–∏ –∞–¥—Ä–µ—Å–∏"),
        Start(
            id="send_location_from_user",
            text=Const("‚úçÔ∏è –í–∫–∞–∑–∞—Ç–∏ –∞–¥—Ä–µ—Å—É"),
            state=states.AddressInputByUser.INPUT_LOCATION,
        ),
        Start(
            id="send_location_from_tg",
            text=Const("üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∞–¥—Ä–µ—Å–æ—é"),
            state=states.AddressInputByTg.SEND_LOCATION,
        ),
        Cancel(Const(BACK_BTN_TXT)),
        state=states.ProfileChangeAddress.NEW_ADDRESS,
    ),
    Window(
        Const("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –∫–≤–∞—Ä—Ç–∏—Ä–∏"),
        TextInput(
            id="apartment_number_input",
            type_factory=int,
            on_success=on_input_apartment_number,
        ),
        SwitchTo(
            Const("–¶–µ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –±—É–¥–∏–Ω–æ–∫"),
            id="private_house",
            state=states.ProfileChangeAddress.CONFIRMATION,
        ),
        state=states.ProfileChangeAddress.APARTMENT_NUMBER,
    ),
    Window(
        Const("–í–≤–µ–¥—ñ—Ç—å –í–∞—à –ø–æ–≤–µ—Ä—Ö"),
        TextInput(
            id="floor_input", type_factory=int, on_success=on_input_floor
        ),
        state=states.ProfileChangeAddress.FLOOR,
    ),
    Window(
        Const("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –≤—ñ–¥ –¥–æ–º–æ—Ñ–æ–Ω—É"),
        TextInput(
            id="intercom_code_input",
            type_factory=int,
            on_success=on_input_intercom_code,
        ),
        Next(Const("–í—ñ–¥—Å—É—Ç–Ω—ñ–π")),
        state=states.ProfileChangeAddress.INTERCOM_CODE,
    ),
    Window(
        Multi(
            Const("–í–∞—à–∞ –Ω–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ —Ç–∞–∫:"),
            Multi(
                Format("–ú—ñ—Å—Ç–æ: {city}"),
                Format("–í—É–ª–∏—Ü—è: {street}"),
                Format("–ù–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É: {house_number}"),
                Format("–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏: {apartment_number}"),
                Format("–ü–æ–≤–µ—Ä—Ö: {floor}"),
                Format("–ö–æ–¥ –≤—ñ–¥ –¥–æ–º–æ—Ñ–æ–Ω—É: {intercom_code}"),
            ),
            Const("–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–º—ñ–Ω—É –∞–¥—Ä–µ—Å–∏"),
            sep="\n\n",
        ),
        Cancel(
            Const("–¢–∞–∫"),
            id="accept_change_address",
            on_click=accept_update_address_in_profile,  # noqa: ignore
        ),
        Cancel(
            Const("–ù—ñ"),
            id="reject_change_address",
        ),
        state=states.ProfileChangeAddress.CONFIRMATION,
        getter=get_all_address_data,
    ),
    on_start=default_on_start_handler,
    on_process_result=on_after_successfully_input_address,
)


@inject
async def on_input_user_location_from_tg(
    msg: Message,
    _: MessageInput,
    manager: DialogManager,
    geo: FromDishka[GeoProcessor],
) -> None:
    coordinates = (msg.location.latitude, msg.location.longitude)

    try:
        output_data = await geo.get_location_with_coordinates(coordinates)
    except InvalidAddressInputError:
        await msg.answer("–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–Ω–∞–π—Ç–∏ –≤–∞—à–æ—ó –∞–¥—Ä–µ—Å–∏, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")
    else:
        manager.dialog_data["address"] = output_data
        await send_main_keyboard(manager, "‚è≥")
        await manager.next()


async def on_close_send_location_dialog(
    msg: ReplyCallbackQuery,
    _: Button,
    manager: DialogManager,
):
    await msg.original_message.delete()

    await send_main_keyboard(manager, "‚è≥")


async def on_accept_find_address(
    _: CallbackQuery, __: Button, manager: DialogManager
) -> None:
    await manager.done({"address": manager.dialog_data["address"]})


send_address_by_telegram_dialog = Dialog(
    Window(
        Const("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –í–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü—ñ—é –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –Ω–∞ –º–∞–ø—ñ"),
        MessageInput(
            filter=F.location,
            func=on_input_user_location_from_tg,  # noqa: ignore
        ),
        RequestLocation(Const("üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∞–¥—Ä–µ—Å–æ—é")),
        Cancel(
            Const(CANCEL_BTN_TXT),
            on_click=on_close_send_location_dialog,  # noqa: ignore
        ),
        markup_factory=ReplyKeyboardFactory(resize_keyboard=True),
        state=states.AddressInputByTg.SEND_LOCATION,
    ),
    Window(
        Format("–í–∞—à–∞ –∞–¥—Ä–µ—Å–∞: <code>{dialog_data[address]}</code>?"),
        Row(
            Button(
                id="back_to_confirmation_change",
                text=Const("–¢–∞–∫"),
                on_click=on_accept_find_address,
            ),
            Back(Const("–ù—ñ")),
        ),
        state=states.AddressInputByTg.CONFIRMATION,
    ),
)


@inject
async def on_input_address_from_user(
    msg: Message,
    __: ManagedTextInput,
    manager: DialogManager,
    value: str,
    geo: FromDishka[GeoProcessor],
) -> None:
    try:
        output_data = await geo.get_location_with_row(value)
    except InvalidAddressInputError:
        await msg.answer("–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–Ω–∞–π—Ç–∏ –≤–∞—à–æ—ó –∞–¥—Ä–µ—Å–∏, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")
    else:
        await manager.done({"address": output_data})


send_address_by_user_dialog = Dialog(
    Window(
        Multi(
            Const("–í–≤–µ–¥—ñ—Ç—å –í–∞—à—É –∞–¥—Ä–µ—Å—É"),
            Const("<i>–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ß–µ—Ä–∫–∞—Å–∏ –±—É–ª—å–≤–∞—Ä –®–µ–≤—á–µ–Ω–∫–∞ 123</i>"),
        ),
        TextInput(
            id="on_input_address_from_user",
            on_success=on_input_address_from_user,  # noqa: ignore
        ),
        Cancel(Const(BACK_BTN_TXT)),
        state=states.AddressInputByUser.INPUT_LOCATION,
    )
)

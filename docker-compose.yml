services:
  bot:
    restart: on-failure
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /usr/src/app
    command: [ "python", "-m", "delivery_service.bootstrap.entrypoints.bot" ]
    env_file:
      - ".env"
    volumes:
      - ./src:/usr/src/app/src
    depends_on:
      redis:
        condition: service_healthy
      delivery_db:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    env_file:
      - .env
    command: [ "redis-server", "--port", "${REDIS_PORT}", "--requirepass", "${REDIS_PASSWORD}" ]
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "-a", "$${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - redis_data:/data

  delivery_db:
    image: postgres:16-alpine
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - "${POSTGRES_INTERNAL_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  #  rabbit:
  #    image: rabbitmq:4.0-management
  #    ports:
  #      - "${AMQP_PORT}:${AMQP_PORT}"
  #      - "15672:15672"
  #    env_file:
  #      - .env
  #    environment:
  #      RABBITMQ_DEFAULT_USER: ${AMQP_USER}
  #      RABBITMQ_DEFAULT_PASS: ${AMQP_PASSWORD}
  #    volumes:
  #      - rabbitmq_data:/var/lib/rabbitmq
  #    healthcheck:
  #      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
  #      interval: 60s
  #      timeout: 5s
  #      retries: 3
  #      start_period: 5s
  #
  #  taskiq_worker:
  #    build:
  #      context: .
  #      dockerfile: Dockerfile
  #    working_dir: /usr/src/app
  #    env_file:
  #      - .env
  #    command: taskiq worker --ack-type when_saved delivery_service.bootstrap.entrypoints.taskiq:setup_broker delivery_service.infrastructure.tasks
  #    volumes:
  #      - ./src:/usr/src/app/src
  #    depends_on:
  #      rabbit:
  #        condition: service_healthy
  #
  #  taskiq_scheduler:
  #    build:
  #      context: .
  #      dockerfile: Dockerfile
  #    working_dir: /usr/src/app
  #    env_file:
  #      - .env
  #    command: taskiq scheduler delivery_service.bootstrap.entrypoints.taskiq:setup_scheduler delivery_service.infrastructure.tasks
  #    volumes:
  #      - ./src:/usr/src/app/src
  #    depends_on:
  #      rabbit:
  #        condition: service_healthy
  #      redis:
  #        condition: service_healthy
  #      delivery_db:
  #        condition: service_healthy

  migration:
    build:
      context: .
      dockerfile: Dockerfile
    restart: on-failure
    working_dir: /usr/src/app
    env_file:
      - .env
    depends_on:
      bot:
        condition: service_started
      delivery_db:
        condition: service_healthy
    command: [ "alembic", "upgrade", "head" ]
    volumes:
      - ./src:/usr/src/app/src

  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    environment:
      - NGROK_CONFIG=/etc/ngrok.yml
    volumes:
      - ./ngrok.yml:/etc/ngrok.yml

volumes:
  redis_data:
  db_data:
  rabbitmq_data: